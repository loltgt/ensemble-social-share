'use strict';

const path = require('path');
const { readFileSync } = require('fs');

const { series, parallel, watch, src, dest } = require('gulp');
const tap = require('gulp-tap');
const rename = require('gulp-rename');
const babel = require('gulp-babel');
const sass = require('gulp-sass')(require('sass'));
const terser = require('gulp-terser');
const sourcemaps = require('gulp-sourcemaps');

const rollup = require('@rbnlffl/gulp-rollup');


const project = {
  'ensemble-common': {
    name: 'loltgt/ensemble [common]',
    version: '0.0.2',
    link: 'https://github.com/loltgt/ensemble'
  },
  'ensemble-modal': {
    name: 'loltgt/ensemble.Modal',
    version: '0.0.2',
    link: 'https://github.com/loltgt/ensemble-modal'
  },
  'ensemble-lightbox': {
    name: 'loltgt/ensemble.Lightbox, loltgt/ensemble.Modal',
    version: '0.0.2',
    link: 'https://github.com/loltgt/ensemble-lightbox'
  },
  'ensemble-social-share': {
    name: 'loltgt/ensemble.SocialShare',
    version: '0.0.3',
    link: 'https://github.com/loltgt/ensemble-social-share'
  }
};


const BASEPATH = process.env.BASEPATH || '';
const DSTPATH = '.';



// dist dir from "src" to "dst" replacement
function _dst(dir, src, dst) {
  return dir.indexOf('/') === -1 ? (dir + '/' + dst) : dir.replace(src, dst);
}

// removes cjs formatting generated by rollup
function _crt(contents) {
  contents = contents.replace('Object.defineProperty(exports, \'__esModule\', { value: true });', '')
                     .replace(/exports\.([^ ]+) = [^;]+;/, 'export { $1 };')
                     .replace(/exports\.([^ ]+) = [^;]+;/, 'export { $1 };');

  return contents;
}

// camelCase to hyphenated
function _cth(name) {
  return name.replace(/([A-Z][^A-Z]+)/g, (cap, w, n) => (n ? '-' : '') + cap.toLowerCase());
}


function _remove_debug(file) {
  let contents = file.contents.toString();
  contents = contents.replace(/console\.(log|error)\([^\)]+\);/g, '');

  file.contents = Buffer.from(contents);
}

function _remove_comments(file) {
  let contents = file.contents.toString();
  contents = contents.replace(/(\/[\*]+)(=?[\w\W]+?)(\*\/)/g, '');

  file.contents = Buffer.from(contents);
}

function _force_inline(file) {
  let contents = file.contents.toString();
  contents = contents.replace(/\n/g, '');

  file.contents = Buffer.from(contents);
}

function _bundle_banner(filename) {
  let pathName = path.parse(filename).name.replace('.min', '');
  let projectName;

  if (pathName.indexOf('-compat') != -1) {
    pathName = pathName.replace('-compat', '');
    projectName = project[pathName].name + ' (compat)';
  } else {
    projectName = project[pathName].name;
  }

  return '/*!\r\
 * ' + projectName + '\r\
 *\r\
 * @version ' + project[pathName].version + '\r\
 * @link ' + project[pathName].link + '\r\
 * @copyright Copyright (C) Leonardo Laureti\r\
 * @license MIT License\r\
 */\r';
}



function js() {
  return src([BASEPATH + 'src/js/**/*.js', '!node_modules/**/*.js', '!**/node_modules/**/*.js'])
    // .pipe(sourcemaps.init())
    .pipe(rollup(null, { sourcemap: true, format: 'cjs' }))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_crt(file.contents.toString()));
    }))
    .pipe(babel()) // sourcemap source reset
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname = _dst(sourcePath.dirname, 'src', 'dist');
      sourcePath.basename = 'ensemble-' + _cth(sourcePath.basename);
    }))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function js_uglify() {
  return src([BASEPATH + 'dist/js/**/*.js', '!**/*.min.js', '!node_modules/**/*.js', '!**/node_modules/**/*.js'])
    // .pipe(sourcemaps.init())
    .pipe(terser({ keep_classnames: true, keep_fnames: true }))
    .pipe(rename(function(sourcePath) {
      sourcePath.extname = '.min' + sourcePath.extname;
    }))
    // .pipe(tap(_remove_debug))
    .pipe(tap(_remove_comments))
    .pipe(tap(_force_inline))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function js_compat() {
  return src([BASEPATH + 'src/js/**/*.js', '!node_modules/**/*.js', '!**/node_modules/**/*.js'])
    // .pipe(sourcemaps.init())
    .pipe(rollup(null, { sourcemap: true, format: 'cjs' }))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_crt(file.contents.toString()));
    }))
    .pipe(babel({
      presets: [
        [ '@babel/preset-env', { targets: 'defaults' } ]
      ],
      plugins: [
        ["@babel/plugin-transform-object-assign"]
      ]
    })) // sourcemap source reset
    .pipe(tap(function(file) {
      let contents = file.contents.toString();
      const missing_regeneratorRuntime = readFileSync('./node_modules/regenerator-runtime/runtime.js');
      contents = contents.replace('  function _asyncToGenerator(fn)', '\n\n' + missing_regeneratorRuntime + '\n\n  function _asyncToGenerator(fn)');

      file.contents = Buffer.from(contents);
    }))
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname = _dst(sourcePath.dirname, 'src', 'dist');
      sourcePath.basename = 'ensemble-' + _cth(sourcePath.basename) + '-compat';
    }))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function css() {
  return src([BASEPATH + 'src/scss/**/*.scss', '!**/*_compat.scss', '!node_modules/**/*.scss', '!**/node_modules/**/*.scss'])
    // .pipe(sourcemaps.init())
    .pipe(sass().on('error', sass.logError))
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname = _dst(sourcePath.dirname, 'src', 'dist');
      sourcePath.dirname = sourcePath.dirname.replace('scss', 'css');
      sourcePath.basename = 'ensemble-' + sourcePath.basename;
    }))
    .pipe(tap(_remove_comments))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function css_uglify() {
  return src([BASEPATH + 'src/scss/**/*.scss', '!**/*_compat.scss', '!node_modules/**/*.scss', '!**/node_modules/**/*.scss'])
    // .pipe(sourcemaps.init())
    .pipe(sass({ outputStyle: 'compressed' }).on('error', sass.logError))
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname = _dst(sourcePath.dirname, 'src', 'dist');
      sourcePath.dirname = sourcePath.dirname.replace('scss', 'css');
      sourcePath.basename = 'ensemble-' + sourcePath.basename;
      sourcePath.extname = '.min' + sourcePath.extname;
    }))
    .pipe(tap(_remove_comments))
    .pipe(tap(_force_inline))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function css_compat() {
  return src([BASEPATH + 'src/scss/**/*_compat.scss', '!node_modules/**/*.scss', '!**/node_modules/**/*.scss'])
    // .pipe(sourcemaps.init())
    .pipe(sass().on('error', sass.logError))
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname = _dst(sourcePath.dirname, 'src', 'dist');
      sourcePath.dirname = sourcePath.dirname.replace('scss', 'css');
      sourcePath.basename = 'ensemble-' + sourcePath.basename.replace('_', '-');
    }))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function css_compat_uglify() {
  return src([BASEPATH + 'src/scss/**/*_compat.scss', '!node_modules/**/*.scss', '!**/node_modules/**/*.scss'])
    // .pipe(sourcemaps.init())
    .pipe(sass({ outputStyle: 'compressed' }).on('error', sass.logError))
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname = _dst(sourcePath.dirname, 'src', 'dist');
      sourcePath.dirname = sourcePath.dirname.replace('scss', 'css');
      sourcePath.basename = 'ensemble-' + sourcePath.basename.replace('_', '-');
      sourcePath.extname = '.min' + sourcePath.extname;
    }))
    .pipe(tap(_remove_comments))
    .pipe(tap(_force_inline))
    .pipe(tap(function(file) {
      file.contents = Buffer.from(_bundle_banner(file.basename) + file.contents.toString());
    }))
    // .pipe(sourcemaps.mapSources(function(sourcePath, file) {
    //   const base = path.relative(file.cwd, file.dirname);
    //   return path.relative(base, sourcePath);
    // }))
    // .pipe(sourcemaps.write('.', { includeContent: false }))
    .pipe(dest(DSTPATH));
}

function demo_css() {
  return src('./ensemble-stack-d1/misc/demo/*.scss')
    // .pipe(sourcemaps.init())
    .pipe(sass({ outputStyle: 'compressed' }).on('error', sass.logError))
    .pipe(rename(function(sourcePath) {
      sourcePath.dirname += '/ensemble-' + sourcePath.basename + '/demo';
      sourcePath.basename = 'demo-ensemble-' + sourcePath.basename;
    }))
    // .pipe(sourcemaps.write('.', { includeContent: false, sourceRoot: './ensemble-stack-d1/misc/demo' }))
    .pipe(dest(DSTPATH));
}

function watcher() {
  watch(BASEPATH + 'src/scss/**/*.scss', build_css);
  watch(BASEPATH + 'src/js/**/*.js', build_js);
}


const build_js = series([js, js_uglify]);
const build_css = parallel([css, css_uglify]);
const compat_js = series([js_compat, js_uglify]);
const compat_css = parallel([css_compat, css_compat_uglify]);

const build = parallel(build_js, build_css);
const compat = parallel(compat_js, compat_css);

exports.default = build;
exports.build_js = build_js;
exports.build_css = build_css;
exports.compat = compat;
exports.compat_js = compat_js;
exports.compat_css = compat_css;
exports.watch = watcher;
exports.demo = demo_css;
